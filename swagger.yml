#Your Flask app knows what to serve based 
# on your API specification in swagger.yml. 
#Additionally, Connexion uses swagger.yml 
# to create API documentation for you.
#To see your API documentation, navigate to
# http://localhost:8000/api/ui/#/People

openapi: 3.0.0

info:
  title: "RP Flask REST API"
  description: "An API about people and notes"
  version: "1.0.0"
servers:
  - url: "/api"
paths:
  /people:
    get:
      operationId: "people.read_all"
      tags:
        - "People"
      summary: "Read the list of people"
      responses:
        "200":
          description: "Successfully read people list"
    post:
      operationId: "people.create"
      #Youâ€™re telling your server to look for a create() 
      # function in the people module.
      tags:
        - People
      summary: "Create a person"
      requestBody:
          description: "Person to create"
          required: True
          content:
            application/json: # the data exchange format of your API
              schema:
                x-body-name: "person"
                $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: "Successfully created person"
  /people/{lname}:
  #The {lname} substring is a placeholder for the last name, 
  # which you have to pass in as a URL parameter. So, for
  # example, the URL path api/people/Ruprecht
    get:
        operationId: "people.read_one"
        tags:
          - People
        summary: "Read one person"
        parameters:
          - $ref: "#/components/parameters/lname"
        responses:
          "200":
            description: "Successfully read person"
components:
  schemas:
    Person:
      type: "object"
      required:
        - lname
      #The dash (-) in front of - lname indicates that required
      # can contain a list of properties. Any property that you 
      # define as required must also exist in properties, which 
      # includes the following:
      # fname: The first name of a person
      # lname: The last name of a person
      properties:
        fname:
          type: "string"
        lname:
          type: "string"
  parameters:
    lname:
      name: "lname"
      description: "Last name of the person to get"
      in: path
      required: True
      schema:
        type: "string"